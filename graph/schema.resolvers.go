package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.40

import (
	"context"
	"grapgql/graph/model"
)

// CreateStory is the resolver for the createStory field.
func (r *mutationResolver) CreateStory(ctx context.Context, input model.NewStory) (*model.Story, error) {

	story := model.Story{
		ID:      input.StoryID,
		Title:   input.Title,
		Content: input.Content,
		Author: &model.User{
			ID:   input.UserID,
			Name: input.UserName,
		},
	}

	return r.S.AddStory(story)

}

// UpdateStory is the resolver for the updateStory field.
func (r *mutationResolver) UpdateStory(ctx context.Context, storyID string, input model.UpdateStoryInput) (*model.Story, error) {

	return r.S.UpdateStory(storyID, input)
}

// AllStories is the resolver for the allStories field.
func (r *queryResolver) AllStories(ctx context.Context) ([]*model.Story, error) {
	return r.S.FindAllStories(), nil
}

// FindStoryByID is the resolver for the findStoryById field.
func (r *queryResolver) FindStoryByID(ctx context.Context, storyID string) (*model.Story, error) {
	return r.S.FindStoryById(storyID)
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
